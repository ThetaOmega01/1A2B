name: CMake Build

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release, Debug]
        c_compiler: [gcc, clang, cl]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${GITHUB_WORKSPACE}/build" >> $GITHUB_ENV

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install --formula cmake

    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v2

    - name: Configure CMake
      run: >
        cmake -B ${{ env.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        ${{ matrix.os == 'windows-latest' && '-DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=OFF' || '' }}

    - name: Build
      run: cmake --build ${{ env.build-output-dir }} --config ${{ matrix.build_type }} ${{ matrix.os == 'windows-latest' && '--verbose' || '' }}

    - name: Test executable exists
      shell: bash
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          if [ -f "${{ env.build-output-dir }}/bin/${{ matrix.build_type }}/1a2b.exe" ] || [ -f "${{ env.build-output-dir }}/bin/1a2b.exe" ]; then
            echo "✅ Executable found on Windows"
          else
            echo "❌ Executable not found on Windows"
            ls -la "${{ env.build-output-dir }}/bin/" || true
            ls -la "${{ env.build-output-dir }}/bin/${{ matrix.build_type }}/" || true
            exit 1
          fi
        else
          if [ -f "${{ env.build-output-dir }}/bin/1a2b" ]; then
            echo "✅ Executable found on ${{ matrix.os }}"
          else
            echo "❌ Executable not found on ${{ matrix.os }}"
            ls -la "${{ env.build-output-dir }}/bin/" || true
            exit 1
          fi
        fi

    - name: Upload build artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: 1a2b-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.c_compiler }}
        path: |
          ${{ env.build-output-dir }}/bin/
          ${{ env.build-output-dir }}/lib/
        retention-days: 7

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Compress and prepare release artifacts
      run: |
        mkdir -p release_files
        
        # Get version from tag
        TAG_NAME=${GITHUB_REF#refs/tags/}
        VERSION=${TAG_NAME#v}  # Remove 'v' prefix if present
        
        echo "🔍 Available artifacts:"
        ls -la artifacts/
        
        # Compress each Release artifact directory as-is
        cd artifacts
        for artifact_dir in */; do
          # Remove trailing slash
          artifact_name=${artifact_dir%/}
          
          # Only process Release artifacts (skip Debug builds)
          if [[ "$artifact_name" == *"-Release-"* ]]; then
            echo "✅ Compressing ${artifact_name}"
            
            # Create tar.gz of the entire artifact directory
            tar -czf "../release_files/${artifact_name}-${VERSION}.tar.gz" "${artifact_name}/"
            
            echo "   📦 Created: ${artifact_name}-${VERSION}.tar.gz"
            
            # Show contents of the compressed file
            echo "   📁 Archive contents:"
            tar -tzf "../release_files/${artifact_name}-${VERSION}.tar.gz" | head -10
            if [ $(tar -tzf "../release_files/${artifact_name}-${VERSION}.tar.gz" | wc -l) -gt 10 ]; then
              echo "   ... and more files"
            fi
          else
            echo "⏭️  Skipping non-Release artifact: ${artifact_name}"
          fi
        done
        
        cd ..
        
        echo ""
        echo "🎯 Final compressed release artifacts:"
        ls -la release_files/
        
        # Verify we have the expected number of Release artifacts
        file_count=$(ls -1 release_files/*.tar.gz 2>/dev/null | wc -l)
        if [ "$file_count" -eq 0 ]; then
          echo "❌ No compressed artifacts created"
          exit 1
        else
          echo "✅ Created $file_count compressed release artifacts!"
        fi
        
        # Show sizes
        echo ""
        echo "📊 Archive sizes:"
        du -h release_files/*.tar.gz

    - name: Determine if pre-release
      id: prerelease
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        if [[ "$TAG_NAME" =~ -alpha|-beta|-rc|-pre ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          echo "This is a pre-release: $TAG_NAME"
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
          echo "This is a full release: $TAG_NAME"
        fi

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.prerelease.outputs.tag_name }}
        name: Release ${{ steps.prerelease.outputs.tag_name }}
        body: |
          ## 1A2B Release ${{ steps.prerelease.outputs.tag_name }}
        draft: false
        prerelease: ${{ steps.prerelease.outputs.is_prerelease }}
        files: release_files/*.tar.gz
